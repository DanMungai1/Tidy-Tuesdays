distinct(track_name, track_artist, .keep_all = TRUE) %>%
mutate(year_released=ymd(track_album_release_date, truncated = 2L)) %>%
mutate(year_released = year(year_released)) %>%
filter(year_released >= 1980) %>%
mutate(duration_min = duration_ms/60000) %>%
group_by(year_released) %>%
summarise(Danceability = mean(danceability), Energy = mean(energy) , "Loudness (db)" = mean(loudness), "Happiness (Valence)" = mean(valence), "Tempo (BPM)" = mean(tempo), "Duration (Min)"= mean(duration_min)) %>%
pivot_longer(, names_to = "Parameter", values_to = "score")
#Summarize each song into release year, generate summary stats
annual_trends <- spotify_songs %>%
distinct(track_name, track_artist, .keep_all = TRUE) %>%
mutate(year_released=ymd(track_album_release_date, truncated = 2L)) %>%
mutate(year_released = year(year_released)) %>%
filter(year_released >= 1980) %>%
mutate(duration_min = duration_ms/60000) %>%
group_by(year_released) %>%
summarise(Danceability = mean(danceability), Energy = mean(energy) , "Loudness (db)" = mean(loudness), "Happiness (Valence)" = mean(valence), "Tempo (BPM)" = mean(tempo), "Duration (Min)"= mean(duration_min)) %>%
pivot_longer(year_released, names_to = "Parameter", values_to = "score")
View(annual_trends)
#Summarize each song into release year, generate summary stats
annual_trends <- spotify_songs %>%
distinct(track_name, track_artist, .keep_all = TRUE) %>%
mutate(year_released=ymd(track_album_release_date, truncated = 2L)) %>%
mutate(year_released = year(year_released)) %>%
filter(year_released >= 1980) %>%
mutate(duration_min = duration_ms/60000) %>%
group_by(year_released) %>%
summarise(Danceability = mean(danceability), Energy = mean(energy) , "Loudness (db)" = mean(loudness), "Happiness (Valence)" = mean(valence), "Tempo (BPM)" = mean(tempo), "Duration (Min)"= mean(duration_min)) %>%
pivot_longer(-year_released, names_to = "Parameter", values_to = "score")
library(tidyverse)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
View(sf_trees)
library(tidyverse)
library(rgdal)
library(lubridate)
library(osmdata)
library(sf)
library(ggmap)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
sf_map <- get_map(getbb("San Francisco"), maptype = "stamen")
sf_plot <- ggmap(sf_map)
sf_plot
sf_plot <- ggmap(sf_map) + stat_density2d(
aes(x = longitude, y = latitude, fill = ..level..),
size = 0.01, , alpha = 0.5, bins = 30, data = sf_trees, geom = "polygon", contour=TRUE)
sf_plot
sf_map <- get_map(getbb("San Francisco"), maptype = "stamen",zoom = "auto")
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "auto")
sf_plot <- ggmap(sf_map) + stat_density2d(
aes(x = longitude, y = latitude, fill = ..level..),
size = 0.01, , alpha = 0.5, bins = 30, data = sf_trees, geom = "polygon", contour=TRUE)
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "auto", zoom = 10)
sf_plot <- ggmap(sf_map) + stat_density2d(
aes(x = longitude, y = latitude, fill = ..level..),
size = 0.01, , alpha = 0.5, bins = 30, data = sf_trees, geom = "polygon", contour=TRUE)
sf_plot
sf_plot <- ggmap(sf_map) + stat_density2d(
aes(x = longitude, y = latitude, fill = ..level..),
size = 0.01, , alpha = 0.5, bins = 30, data = sf_trees, geom = "polygon", contour=TRUE) +
scale_fill_viridis_c(option = "plasma")  +
labs(title = " 2017 Philadelphia Pennsylvania Handicap Parking Violations", subtitle = 'Tickets issued for counterfeit permits, blocking ramps, and illegally parking in handicap spaces' ,caption = 'Data by Open Data Philly\n#TidyTuesday • @Ian_Bellio') +
theme(axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank()) + guides(fill = guide_colorbar(title = "Handicap-Related\n Violations")) +
theme(plot.title = element_text(size=22, family = "Source Sans Pro Semibold")) + theme(text = element_text(size=15, family = "Source Sans Pro"))
sf_plot
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "auto", zoom = "10")
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "10")
sf_plot <- ggmap(sf_map) + stat_density2d(
aes(x = longitude, y = latitude, fill = ..level..),
size = 0.01, , alpha = 0.5, bins = 30, data = sf_trees, geom = "polygon", contour=TRUE) +
scale_fill_viridis_c(option = "plasma")  +
labs(title = " 2017 Philadelphia Pennsylvania Handicap Parking Violations", subtitle = 'Tickets issued for counterfeit permits, blocking ramps, and illegally parking in handicap spaces' ,caption = 'Data by Open Data Philly\n#TidyTuesday • @Ian_Bellio') +
theme(axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank()) + guides(fill = guide_colorbar(title = "Handicap-Related\n Violations")) +
theme(plot.title = element_text(size=22, family = "Source Sans Pro Semibold")) + theme(text = element_text(size=15, family = "Source Sans Pro"))
sf_plot
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "10", force=TRUE)
sf_plot <- ggmap(sf_map) + stat_density2d(
aes(x = longitude, y = latitude, fill = ..level..),
size = 0.01, , alpha = 0.5, bins = 30, data = sf_trees, geom = "polygon", contour=TRUE) +
scale_fill_viridis_c(option = "plasma")  +
labs(title = " 2017 Philadelphia Pennsylvania Handicap Parking Violations", subtitle = 'Tickets issued for counterfeit permits, blocking ramps, and illegally parking in handicap spaces' ,caption = 'Data by Open Data Philly\n#TidyTuesday • @Ian_Bellio') +
theme(axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank()) + guides(fill = guide_colorbar(title = "Handicap-Related\n Violations")) +
theme(plot.title = element_text(size=22, family = "Source Sans Pro Semibold")) + theme(text = element_text(size=15, family = "Source Sans Pro"))
sf_plot
SF <- ggplot() + geom_point(sf_trees, aes(x=longitude, y=latitude))
SF <- ggplot() + geom_point(sf_trees, aes(x=longitude, y=latitude))
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "10", force=TRUE)
SF <- ggplot() + geom_point(sf_trees, aes(x=longitude, y=latitude))
SF <- ggplot() + geom_point(sf_trees, mapping = aes(x=longitude, y=latitude))
SF
philly_plot <- ggmap(philly_map) + geom_point(aes(x = lon, y = lat, fill = age))
sf_plot <- ggmap(sf_map) + geom_point(aes(x = longitude, y = latitude, fill = age))
sf_plot
sf_plot <- ggmap(sf_map) + geom_point(aes(x = longitude, y = latitude, color= date))
sf_plot
sf_plot <- ggmap(sf_map) + geom_point(aes(x = longitude, y = latitude, fill= date))
sf_plot
sf_plot <- ggmap(sf_map) + geom_point(aes(x = longitude, y = latitude)
sf_plot <- ggmap(sf_map) + geom_point(aes(x = longitude, y = latitude)
sf_plot <- ggmap(sf_map) + geom_point(aes(x = longitude, y = latitude))
sf_plot
sf_plot <- ggmap(sf_map) + geom_point(aes(x =longitude, y =latitude))
sf_plot
SF <- ggplot() + geom_point(sf_trees, mapping = aes(x=longitude, y=latitude))
SF
library(ggplot2)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10, contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5, height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta = 10, phi = 30, windowsize = c(800, 800))
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
library(rayshader)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10, contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow = c(1, 2))
plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5, height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta = 10, phi = 30, windowsize = c(800, 800))
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p <- ggmap(get_map(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p <- ggmap(get_map(location = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Initial.Type.Group), data = i2, size = 0.5) +
theme(legend.position="bottom")
sf_plot <- ggmap(sf_map) + geom_point(aes(x =longitude, y =latitude))
sf_plot
sf_plot <- ggmap(sf_map) + geom_point(data = sf_trees, aes(x =longitude, y =latitude))
sf_plot
sf_plot <- ggmap(sf_map) + geom_point(data = sf_trees, aes(x =longitude, y =latitude)) + xlim(-122.55,-122.35) + ylim(37.75,37.82)
sf_plot
p
sf_plot <- ggmap(sf_map) + geom_point(data = sf_trees, aes(x =longitude, y =latitude, color= dbh)) + xlim(-122.55,-122.35) + ylim(37.75,37.82) +
sf_plot
sf_plot <- ggmap(sf_map) + geom_point(data = sf_trees, aes(x =longitude, y =latitude, color= dbh)) + xlim(-122.55,-122.35) + ylim(37.75,37.82)
sf_plot
sf_plot <- ggmap(sf_map) + stat_density_2d(data = sf_trees, aes(x =longitude, y =latitude, fill=stat(nlevel)), geom = "polygon", n=100, bins = 10) + xlim(-122.55,-122.35) + ylim(37.75,37.82)
sf_plot
sf_plot <- ggmap(sf_map) + stat_density_2d(data = sf_trees, aes(x =longitude, y =latitude, fill=stat(nlevel)), geom = "polygon", n=100, bins = 10) + xlim(-122.55,-122.35) + ylim(37.75,37.82) + scale_fill_viridis_c(option = "plasma")
sf_plot
sf_plot <- ggmap(sf_map) + stat_density_2d(data = sf_trees, aes(x =longitude, y =latitude, fill=stat(nlevel)), geom = "polygon", n=100, bins = 30) + xlim(-122.55,-122.35) + ylim(37.75,37.82) + scale_fill_viridis_c(option = "plasma")
sf_plot
plot_gg(sf_plot, width = 5, height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta = 10, phi = 30, windowsize = c(800, 800))
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
render_snapshot(clear = TRUE)
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
plot_gg(sf_plot, width = 5, height = 5, multicore = TRUE, scale = 250,
zoom = 1, theta = 10, phi = 30, windowsize = c(1200, 1200))
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
plot_gg(sf_plot, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(sf_plot, width = 5, height = 5, multicore = TRUE, scale = 250,
zoom = 1, theta = 10, phi = 30, windowsize = c(1200, 1200))
date_dbh <- ggplot() + geom_point(sf_trees, aes(x=date, y=dbh)
date_dbh <- ggplot() + geom_point(sf_trees, aes(x=date, y=dbh))
date_dbh <- ggplot() + geom_point(sf_trees, aes(x=date, y=dbh))
date_dbh <- ggplot() + geom_point(data=sf_trees, aes(x=date, y=dbh))
date_dbh
sf_trees <- sf_trees %>%
filter(dbh <= 200)
date_dbh <- ggplot() + geom_point(data=sf_trees, aes(x=date, y=dbh))
date_dbh
date_dbh <- ggplot() + geom_point(data=sf_trees, aes(x=date, y=dbh, color=species))
date_dbh
sf_trees <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1))
View(sf_trees)
date_dbh <- ggplot() + geom_point(data=sf_trees, aes(x=date, y=dbh, color=Genus))
date_dbh
sf_trees <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
summarise(mode = mode(Genus))
View(sf_trees)
sf_trees <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
summarise(count = count(Genus))
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
sf_trees <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
summarise(count = count(Genus))
View(sf_trees)
sf_trees <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
summarise(count = count(Genus))
sf_trees <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
count(Genus, rank) %>%
arrange(rank, desc(n))
sf_trees <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
count(Genus)
View(sf_trees)
sf_trees <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
count(Genus) %>%
arrange(desc(n))
top_genus <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
count(Genus) %>%
arrange(desc(n))
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top_genus <- sf_trees %>%
filter(dbh <= 200) %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
count(Genus) %>%
arrange(desc(n))
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
group_by(Genus) %>%
count(Genus) %>%
arrange(desc(n))
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
count(Genus) %>%
arrange(desc(n))
View(top_genus)
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == top_n(top_genus,5, n))
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)")
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n))
View(top_genus)
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == top_n(top_genus,5, n))
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n)
View(top_genus)
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == top_genus$Genus)
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n) %>%
lst()
View(top_genus)
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == top_genus)
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus %in% top_genus)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n) %>%
lst()
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus %in% top_genus)
View(top5)
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus %in% top_genus$Genus)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus %in% top_genus$Genus)
top5 <- sf_trees %>%
mutate(Genus = word(species, 1))
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
mutate(Genus = filter(Genus %in% top_genus$Genus))
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
mutate(Genus = filter(Genus %in% top_genus))
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus %in% top_genus)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n)
View(top_genus)
View(top_genus)
View(top_genus)
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n)
top5 <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == "Prunus" | Genus == "Platanus" |Genus == "	Ficus" | 	Genus == "Pittosporum" | Genus == "Tristaniopsis")
Prunus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == "Prunus" )
Prunus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == "Prunus" )
Platanus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter( Genus == "Platanus")
library(tidyverse)
library(rgdal)
library(lubridate)
library(osmdata)
library(sf)
library(ggmap)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n)
Prunus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == "Prunus" )
Platanus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter( Genus == "Platanus")
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "10", force=TRUE)
sf_plot <- ggmap(sf_map) + stat_density_2d(data = sf_trees, aes(x =longitude, y =latitude, fill=stat(nlevel)), geom = "polygon", n=100, bins = 30) + xlim(-122.55,-122.35) + ylim(37.75,37.82) + scale_fill_viridis_c(option = "plasma")
sf_plot
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "10", force=TRUE)
sf_plot <- ggmap(sf_map) + geom_point(data = Prunus, aes(x =longitude, y =latitude), size=0.8, alpha = 0.4) + xlim(-122.55,-122.35) + ylim(37.75,37.82)
sf_plot
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "10", force=TRUE)
sf_plot <- ggmap(sf_map) + geom_point(data = Prunus, aes(x =longitude, y =latitude), size=1.1, alpha = 0.6, color = red) + xlim(-122.55,-122.35) + ylim(37.75,37.82)
sf_map <- get_map(getbb("San Francisco"), maptype = "satellite", scale = "10", force=TRUE)
sf_plot <- ggmap(sf_map) + geom_point(data = Prunus, aes(x =longitude, y =latitude), size=1.1, alpha = 0.6, color = "red") + xlim(-122.55,-122.35) + ylim(37.75,37.82)
sf_plot
View(Platanus)
library(tidyverse)
library(rgdal)
library(lubridate)
library(osmdata)
library(sf)
library(ggmap)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n)
Prunus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == "Prunus" )
Platanus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter( Genus == "Platanus")
View(Prunus)
count(Prunus)
Sys.time()
Sys.Date()
min(Prunus$date, na.rm=TRUE)
Sys.Date() - min(Prunus$date, na.rm=TRUE)
format(Sys.Date() - min(Prunus$date, na.rm=TRUE), "years")
format(Sys.Date() - min(Prunus$date, na.rm=TRUE), "%Y")
format(Sys.Date() - min(Prunus$date, na.rm=TRUE), "%B %Y")
(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365
format(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365, digits=2)
Sys.Date() - min(Prunus$date, na.rm=TRUE))/365
format((Sys.Date() - min(Prunus$date, na.rm=TRUE))/365, digits=2)
(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365
install.packages("prettydoc")
library(tidyverse)
library(rgdal)
library(lubridate)
library(osmdata)
library(sf)
library(ggmap)
library(prettydoc)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n)
Prunus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == "Prunus" )
Platanus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter( Genus == "Platanus")
sf_map <- get_map(location = c(left = -122.5501, bottom = 37.6993, right = -122.3367, top = 37.8116),
zoom = 14 , color = "bw")
sf_plot <- ggmap(sf_map) + geom_point(data = Prunus, aes(x =longitude, y =latitude), size=1.1, alpha = 0.6, color = "red") + xlim(-122.55,-122.35) + ylim(37.75,37.82)
sf_plot
sf_map <- get_map(location = c(left = -122.5501, bottom = 37.6993, right = -122.3367, top = 37.8116),
zoom = 14 , color = "bw")
sf_plot <- ggmap(sf_map) + geom_point(data = Prunus, aes(x =longitude, y =latitude), size=1.1, alpha = 0.45, color = "red") + theme(axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank())
sf_plot
r format((Sys.Date() - min(Prunus$date, na.rm=TRUE))/365, digits=2)
format((Sys.Date() - min(Prunus$date, na.rm=TRUE))/365, digits=2)
format((Sys.Date() - min(Prunus$date, na.rm=TRUE))/365, digits=4)
format((Sys.Date() - min(Prunus$date, na.rm=TRUE))/365, digits=4), '%Y')
(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365, digits=4)
(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365)
Sys.Date() - min(Prunus$date, na.rm=TRUE)/365
Sys.Date() - min(Prunus$date, na.rm=TRUE)
format(Sys.Date() - min(Prunus$date, na.rm=TRUE), '%B %Y')
format((Sys.Date() - min(Prunus$date, na.rm=TRUE)), '%B %Y')
min(Prunus$date, na.rm=TRUE)
(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365
year(Sys.Date() - min(Prunus$date, na.rm=TRUE))
as.double(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365
as.double(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365, digits=3)
(as.double(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365), digits=3)
format(as.double(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365), digits=3)
printf ("%.2f", as.double(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365)
sprintf ("%.2f", as.double(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365)
sprintf ("%.1f", as.double(Sys.Date() - min(Prunus$date, na.rm=TRUE))/365)
library(tidyverse)
library(rgdal)
library(lubridate)
library(osmdata)
library(sf)
library(ggmap)
library(prettydoc)
library(plotly)
install.packages("plotly")
library(tidyverse)
library(rgdal)
library(lubridate)
library(osmdata)
library(sf)
library(ggmap)
library(prettydoc)
library(plotly)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
top_genus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus != "Tree(s)") %>%
count(Genus) %>%
arrange(desc(n)) %>%
top_n(5,n)
Prunus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter(Genus == "Prunus" )
Platanus <- sf_trees %>%
mutate(Genus = word(species, 1)) %>%
filter( Genus == "Platanus")
sf_map <- get_map(location = c(left = -122.5501, bottom = 37.6993, right = -122.3367, top = 37.8116),
zoom = 14 , color = "color")
sf_plot <- ggmap(sf_map) + geom_point(data = Prunus, aes(x =longitude, y =latitude), size=1.1, alpha = 0.45, color = "red") + theme(axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank())
sf_plot
ggplotly(sf_plot)
View(Prunus)
sf_map <- get_map(location = c(left = -122.5501, bottom = 37.6993, right = -122.3367, top = 37.8116),
zoom = 14 , color = "color")
sf_plot <- ggmap(sf_map) + geom_point(data = Prunus, aes(x =longitude, y =latitude, label=date, label=address), size=1.1, alpha = 0.45, color = "red") + theme(axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank())
ggplotly(sf_plot, height = 350, width=600)
library(rmarkdown)
install.packages("rmarkdown")
library(pander)
devtools::install_github('rstudio/rmarkdown')
library(Rcpp)
remove.packages("Rcpp", lib="~/R/win-library/3.6")
devtools::install_github('rstudio/rmarkdown')
